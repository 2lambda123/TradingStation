@page  "/NewsComponent"
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

    <div class="container">
        @if (errorMessage == "")
        {
            @for (var j = 0; j < newsCategories.Count; ++j)
            {
            <h1>@newsCategoryTitles[j]</h1>
            <div class="col-lg-10">
                <div id="@($"carousel{j}")" class="carousel slide" data-ride="carousel">
                    <div class="carousel-inner">
                        @for (var i = 0; i < newsCategories[j].Count / 2 && i < 5; ++i)
                        {
                            <div class=@($"carousel-item {(i == 0 ? "active" : "")}")>
                                <div class="row">
                                    @for (var k = 0; k < 3; ++k)
                                    {
                                        <div class="col-md-4">
                                            <div class="lib-panel">
                                                <div class="row box-shadow">
                                                    <div class="lib-row lib-header">
                                                        <a href="@newsCategories[j][i + k].Link" target="_blank">@newsCategories[j][i + k].Title</a>
                                                        <div class="lib-header-separator"></div>
                                                    </div>
                                                    <div class="lib-row lib-desc">
                                                        <p><span class="glyphicon glyphicon-calendar" aria-hidden="true"></span> >@newsCategories[j][i + k].PubDate</p>
                                                        <p>@FormatDescription(newsCategories[j][i + k].Description)</p>
                                                        <p class="lib-footer">@newsCategories[j][i + k].Author</p>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                    <a class="carousel-control-prev" href="@($"#carousel{j}")" role="button" data-slide="prev">
                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                        <span class="sr-only">Previous</span>
                    </a>
                    <a class="carousel-control-next" href="@($"#carousel{j}")" role="button" data-slide="next">
                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                        <span class="sr-only">Next</span>
                    </a>
                </div>
            </div>
            }
        }
        else
        {
            <p>@errorMessage</p>
        }
    </div>

@code {
    private List<List<NewsItem>> newsCategories;
    private List<string> newsCategoryTitles;
    private string urlBusiness = "https://finance.rambler.ru/rss/business/";
    private string urlEconomics = "https://finance.rambler.ru/rss/economics/";
    private string urlMarkets = "https://finance.rambler.ru/rss/markets/";
    private string errorMessage = "";

    private string FormatDescription(string desc)
    {
        if (desc.Length > 200)
        {
            desc = desc.Substring(0, 200) + "...";
        }

        return desc;
    }

    private void GetNews()
    {
        try
        {
            newsCategoryTitles = new List<string>();
            newsCategoryTitles.Add("Business");
            newsCategoryTitles.Add("Economics");
            newsCategoryTitles.Add("Markets");

            newsCategories = new List<List<NewsItem>>();
            newsCategories.Add(NewsGetter.GetNews(urlBusiness).ToList());
            newsCategories.Add(NewsGetter.GetNews(urlEconomics).ToList());
            newsCategories.Add(NewsGetter.GetNews(urlMarkets).ToList());
        }
        catch (BadRequestException)
        {
            errorMessage = "Unfortunately, the news are currently unavailable. Please try again later";
        }
    }

    protected override void OnInitialized()
    {
        GetNews();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            for (var i = 0; i < newsCategories.Count; ++i)
            {
                await JSRuntime.InvokeVoidAsync("jsFunctions.initializeCarousel", $"carousel{i}");
            }
        }
    }
}
