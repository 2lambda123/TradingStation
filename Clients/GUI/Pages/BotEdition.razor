@inject IModalService modal
@inject NavigationManager NavigationManager
@inject ISessionStorageService Storage

<div style="width: 500px;">
    <EditForm EditContext="@editContext" OnValidSubmit="@Edit">
        <DataAnnotationsValidator />
        <Wizard Id="Wizard">
            <WizardStep Name="Change name">
                <div class="form-group mt-5">
                    <label>Old name:</label>
                    <input class="form-control" readonly="readonly" value="@CurrentBot.Name" />
                    <br>
                    <label>New name:</label>
                    <InputText class="form-control" @bind-Value="userInput.Name" placeholder="New name" />
                    <ValidationMessage For="@(() => userInput.Name)" />
                </div>
                @if (errorServerMessage.Length != 0)
                {
                    <label style="color: red;"> @errorServerMessage </label>
                    <br />
                }
            </WizardStep>
            <WizardStep Name="Bot rules">
                <br>
                <div>
                    @foreach (var rule in initialRules)
                    {
                        <div class="form-check">
                            <br>
                            <input class="form-check-input" type="checkbox" @bind-value="@rule.IsChoosen">
                            <label class="form-check-label">@rule.Description</label>
                            @if (rule.IsChoosen)
                            {
                                <div>
                                    <label>Parameters:</label>
                                    <div class="form-row input-group-prepend">
                                        <br>
                                        <label class="col-8 ">Percentage of the user's balance</label>
                                        <input @bind-value="@rule.MoneyLimitPercents" type="number" class="col-4">
                                    </div>
                                    <div class="form-row input-group-prepend">
                                        <label class="col-8 ">Trigger value to trade</label>
                                        <input @bind-value="@rule.TriggerValue" type="number" placeholder="1.0" step="0.01" min="0" max="10" class="col-4">
                                    </div>
                                    <div class="form-row input-group-prepend">
                                        <label class="col-8 ">Time interval</label>
                                        <input @bind-value="@rule.TimeMarker" type="@(@rule.IsChoosen ? "time" : "hidden")" class="col-4">
                                    </div>
                                </div>
                                <br>
                            }

                        </div>
                    }
                </div>
                <ValidationSummary />

                @if (errorServerMessage.Length != 0)
                {
                    <label style="color: red;"> @errorServerMessage </label>
                    <br />
                }
                @if (showLoading)
                {
                    <div class="spinner-border" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                }
                <br>
            </WizardStep>
        </Wizard>
    </EditForm>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }
    [Parameter] public BotData CurrentBot { get; set; }
    private BotModel userInput;
    private EditContext editContext;
    private bool showLoading = false;
    private string errorServerMessage = "";
    private List<BotRuleModel> initialRules;
    private UserToken userToken;

    private void InitializeBotRules()
    {
        BotRuleModel ruleBuy = null;
        BotRuleModel ruleSell = null;
        if (CurrentBot.Rules != null)
        {
            foreach (var rule in CurrentBot.Rules)
            {
                if (rule.OperationType == OperationType.Buy)
                {
                    ruleBuy = new BotRuleModel(rule);
                }
                else
                {
                    ruleSell = new BotRuleModel(rule);
                }
            }
        }

        if (ruleBuy == null)
        {
            ruleBuy = new BotRuleModel(OperationType.Buy);
        }
        if (ruleSell == null)
        {
            ruleSell = new BotRuleModel(OperationType.Sell);
        }
        initialRules = new List<BotRuleModel>() { ruleBuy, ruleSell };
    }

    private void MapRules()
    {
        userInput.Rules = new List<BotRuleData>();
        foreach (var rule in initialRules)
        {
            if (rule.IsChoosen)
            {
                userInput.Rules.Add(new BotRuleData()
                {
                    OperationType = rule.OperationType,
                    MoneyLimitPercents = rule.MoneyLimitPercents,
                    TriggerValue = rule.TriggerValue,
                    TimeMarker = (int)rule.TimeMarker.TotalMinutes
                });
            }
        }
    }

    private bool HasError()
    {
        return !editContext.Validate();
    }

    public async Task Edit()
    {
        errorServerMessage = "";

        showLoading = true;

        if (HasError())
        {
            showLoading = false;
            return;
        }

        MapRules();

        // When rules will be ready
        //var request = new CreateBotRequest
        //{
        //    Name = userInput.Name,
        //    BotId = await Storage.GetItemAsync<Guid>("botId"),
        //    Rules = userInput.Rules
        //};

        userToken.UserId = await Storage.GetItemAsync<Guid>("id");
        userToken.Body = await Storage.GetItemAsync<string>("token");

        var request = new EditBotRequest
        {
            Name = userInput.Name,
            BotId = CurrentBot.Id,
            Rules = userInput.Rules
        };

        try
        {
            await BotManager.EditBot(userToken, request);

            BlazoredModal.Close(ModalResult.Ok($"Form was submitted successfully."));

        }
        catch (BadRequestException)
        {
            errorServerMessage = "Something went wrong during bot creation";
        }
        catch (Exception)
        {
            errorServerMessage = "The server cannot process your request.";
        }
        finally
        {
            showLoading = false;
        }
    }

    protected override void OnInitialized()
    {
        userToken = new UserToken();

        userInput = new BotModel();

        InitializeBotRules();

        editContext = new EditContext(userInput);

        BlazoredModal.SetTitle("Edit bot");
    }
}

