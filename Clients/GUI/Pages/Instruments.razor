@page "/instruments"
@inject IModalService Modal
@inject ISessionStorageService Storage
@inject NavigationManager Navigation
@attribute [Authorize]
<div class="container">
    <div class="row">
        <div class="col-md">
            <h3>Instruments</h3>
        </div>
        <div class="col-md float-right">
            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <label class="input-group-text">Instrument</label>
                </div>
                <select @onchange="@UpdateInstruments" class="custom-select">
                    @foreach (var instrument in instrumentOptions)
                    {
                        <option value=@instrument>@instrument</option>
                    }
                </select>
                <div class="input-group-prepend">
                    <label class="input-group-text">Page size</label>
                </div>
                <select @onchange="@UpdatePageSize" class="custom-select">
                    <option value=10>10</option>
                    <option value=20>20</option>
                    <option value=50>50</option>
                </select>
            </div>
        </div>
    </div>
    <div class="row">
        @if (areInstrumentsLoading)
        {
            <div class="spinner-border" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        }
        else if (!errorOccured)
        {
            <table class="table table-bordered">
                <thead class="thead-light">
                    <tr>
                        <th scope="col">Figi</th>
                        <th scope="col">Name</th>
                        <th scope="col">Currency</th>
                        <th scope="col">Lot</th>
                        <th scope="col">Action</th>

                    </tr>
                </thead>
                <tbody>
                    @foreach (var instrument in marketInstruments.Skip(pageIndex * pageSize).Take(pageSize))
                    {
                        <tr>
                            <td>@instrument.Figi</td>
                            <td>@instrument.Name</td>
                            <td>@instrument.Currency</td>
                            <td>@instrument.CountInLot</td>
                            <td>
                                <button class=" btn btn-light"
                                        @onclick="@(() => OpenInstrument(instrument))">
                                    Open instrument
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <nav aria-label="Page navigation example">
                <ul class="pagination align-content-center">
                    <input type="@(prevDisabled ? "hidden" : "button")"
                           class="btn btn-primary m-1 ml-3" value="Previous" @onclick="@PreviousPage" />
                    
                    <input class="btn btn-active btn-sm col-1" disabled="true" value="@pagesToShow[0]"/>
                    <input class="btn btn-light btn-sm col-1" value="@pagesToShow[1]" @onclick="@(() => MoveTo(pagesToShow[1]))" />
                    <input class="btn btn-light btn-sm col-1" value="@pagesToShow[2]" @onclick="@(() => MoveTo(pagesToShow[2]))" />

                    <input class="btn btn-light btn-sm col-2" value="..." @onclick="@(() => MoveTo(pageIndex + 3))" />

                    <input class=" btn btn-light btn-sm col-1" value="@lastPageIndex" @onclick="@(() => MoveTo(lastPageIndex))" />
                    
                    <input type=" @(nextDisabled ? "hidden" : "button" )"
                           class="btn btn-primary m-1 mr-3" value="Next" @onclick="@NextPage" />

                </ul>
            </nav>
        }
        else
        {
            <h3 class=" m-lg-5">
                    @errorMessage</h3>
                }
</div>
</div>
@code {
    private IEnumerable<Instrument> marketInstruments;
    private List<string> instrumentOptions;
    private string selectedInstrument;
    private bool areInstrumentsLoading;
    private bool errorOccured;
    private string errorMessage;

    private int pageIndex;
    private int nextPage;
    private int nextNextPageIndex;
    private int[] pagesToShow;
    private int lastPageIndex;
    private int pageSize = 10;
    private string token = "t.-lW-yXwRofmPWDrSqm9XpBO2K4WbTmHPkKPgRskRDlMqLCxzbP8efGmM3l6U1HU9ReMg5R0t3QqO86twfG3-vw";

    private void UpdatePageSize(ChangeEventArgs e)
    {
        var oldSize = pageSize;

        pageSize = int.Parse(e.Value.ToString());

        pageIndex = oldSize * pageIndex / pageSize;

        lastPageIndex = marketInstruments.Count() / pageSize;


        StateHasChanged();
    }

    private async Task UpdateInstruments(ChangeEventArgs e)
    {
        try
        {
            pageIndex = 0;
            selectedInstrument = e.Value.ToString();
            areInstrumentsLoading = true;

            var instrumentType = (InstrumentType)Enum.Parse(typeof(InstrumentType), selectedInstrument);

            var result = await BrokerManager.GetInstruments(BrokerType.TinkoffBroker, token, instrumentType);

            areInstrumentsLoading = false;

            marketInstruments = result;

            lastPageIndex = marketInstruments.Count() / pageSize;

            pagesToShow = new int[100];
            for (int i = 0; i <= lastPageIndex; i++)
            {
                pagesToShow[i] = i;
            }
        }
        catch (Exception)
        {
            areInstrumentsLoading = false;

            errorOccured = true;

            errorMessage = "Can't load instruments, try again later";
        }
    }

    private void PreviousPage()
    {
        --pageIndex;
        for (int i = 0; i <= lastPageIndex; i++)
        {
            pagesToShow[i] -= 1;
        }
        StateHasChanged();
    }

    private void MoveTo(int page)
    {
        pageIndex = page;
        for (int i = 0; i <= lastPageIndex; i++)
        {
            pagesToShow[i] = page + i;
        }
        StateHasChanged();
    }

    private bool prevDisabled =>
            pageIndex == 0;

    private void NextPage()
    {
        ++pageIndex;
        for (int i = 0; i <= lastPageIndex; i++)
        {
            pagesToShow[i] += 1;
        }
        StateHasChanged();
    }

    private bool nextDisabled =>
            (pageIndex + 1) * pageSize > marketInstruments.Count();

    protected override async Task OnInitializedAsync()
    {
        errorOccured = false;
        pageIndex = 0;
        marketInstruments = new List<Instrument>();

        instrumentOptions = new List<string>()
{
            "Bond",
            "Currency",
            "Stock"
        };

        areInstrumentsLoading = true;

        try
        {
            var result = await BrokerManager.GetInstruments(BrokerType.TinkoffBroker, token, InstrumentType.Bond);

            marketInstruments = result;

            areInstrumentsLoading = false;

            pageIndex = 0;
            lastPageIndex = marketInstruments.Count() / pageSize;

            pagesToShow = new int[100];
            for (int i = 0; i <= lastPageIndex; i++)
            {
                pagesToShow[i] = i;
            }

        }
        catch (Exception)
        {
            areInstrumentsLoading = false;

            errorMessage = "Can't load instruments, try again later";
            errorOccured = true;
        }
    }

    private void OpenInstrument(Instrument instrument)
    {
        Storage.SetItemAsync("instrument", instrument);
        Navigation.NavigateTo("/instrumentInfo");
    }
}

