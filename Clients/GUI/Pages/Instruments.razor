@page "/instruments"

@using System.Threading;

<div class="container">
    <div class="row">
        <div class="col-md">
            <h3>Instruments</h3>
        </div>
        <div class="col-md float-right">
            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <label class="input-group-text" for="inputGroupSelect01">Choose instrument</label>
                </div>
                <select @onchange="@UpdateInstruments" class="custom-select">
                    @foreach (var instrument in InstrumentOptions)
                    {
                        <option value=@instrument>@instrument</option>
                    }
                </select>
            </div>
        </div>
    </div>
    <div class="row">
        @if (AreInstrumentsLoading)
        {
            <div class="spinner-border" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        }
        else
        {
            <table class="table table-bordered">
                <thead class="thead-light">
                    <tr>
                        <th scope="col">Figi</th>
                        <th scope="col">Name</th>
                        <th scope="col">Currency</th>
                        <th scope="col">Lot</th>
                        <th scope="col">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var instrument in MarketInstruments.Skip(pageIndex * pageSize).Take(pageSize))
                    {
                        <tr>
                            <td>@instrument.Figi</td>
                            <td>@instrument.Name</td>
                            <td>@instrument.Currency</td>
                            <td>@instrument.Lot</td>
                            <td @onclick="@(() => SaveInstrument(instrument))">
                                Add to portfolio
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <input type="@(prevDisabled ? "hidden" : "button")" class="btn btn-primary m-1 ml-3" value="Previous" @onclick="@PreviousPage"/>
            <input type="@(nextDisabled ? "hidden" : "button")" class="btn btn-primary m-1 ml-auto mr-3" value="Next" @onclick="@NextPage" />
        }
    </div>
</div>


@code {
    public List<IMarketInstrument> MarketInstruments { get; set; }
    public List<string> InstrumentOptions { get; set; }
    public string SelectedInstrument { get; set; }
    public bool AreInstrumentsLoading { get; set; }

    private int pageIndex;
    private const int pageSize = 10;
    private TinkoffBankBroker broker;

    private async Task UpdateInstruments(ChangeEventArgs e)
    {
        SelectedInstrument = e.Value.ToString();
        AreInstrumentsLoading = true;

        var result = await Task.Run(() =>
            SelectedInstrument switch
            {
                "Bonds" => broker.GetAllBonds(),
                "Currencies" => broker.GetAllCurrencies(),
                "Stocks" => broker.GetAllStocks(),
                _ => MarketInstruments
            });

        AreInstrumentsLoading = false;

        MarketInstruments = result;
    }

    private async Task SaveInstrument(IMarketInstrument instrument)
    {
        await broker.SaveInstrument(instrument);
    }

    private void PreviousPage()
    {
        --pageIndex;
        StateHasChanged();
    }

    private bool prevDisabled =>
            pageIndex == 0;

    private void NextPage()
    {
        ++pageIndex;
        StateHasChanged();
    }

    private bool nextDisabled =>
            (pageIndex + 1) * pageSize > MarketInstruments.Count;

    protected override async Task OnInitializedAsync()
    {
        pageIndex = 0;

        InstrumentOptions = new List<string>()
        {
            "Currencies",
            "Bonds",
            "Stocks"
        };

        AreInstrumentsLoading = true;

        var data = new CreateBrokerData()
        {
            Depth = 1,
            Token = ""
        };

        broker = new TinkoffBankBroker(data);

        MarketInstruments = new List<IMarketInstrument>();

        var result = await Task.Run(() => broker.GetAllBonds());

        MarketInstruments = result;

        AreInstrumentsLoading = false;

    }
}
