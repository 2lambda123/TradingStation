@page "/instrument"
@inject NavigationManager NavManager
@inject IModalService Modal
@inject ISessionStorageService Storage
@attribute [Authorize]

<h3 align ="center">@instrument.Name</h3>

<div class="container">
    @if (isInstrumentLoading)
    {
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    }
    else if (!errorOccured)
    {
        <table class="table table-bordered">
            <thead class="thead-light">
                <tr>
                    <th scope="col">Figi</th>
                    <th scope="col">Name</th>
                    <th scope="col">Type</th>
                    <th scope="col">Currency</th>
                    <th scope="col">Lot</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>@instrument.Figi</td>
                    <td>@instrument.Name</td>
                    <td>@instrument.Type</td>
                    <td>@instrument.Currency</td>
                    <td>@instrument.Lot</td>
                </tr>
            </tbody>
        </table>

        <div class="form-row">
            <div class="form-group col-md-2">
                <label for="lotsInPortfolio">Lots in portfolio</label>
                <input type="number" class="form-control" id="lotsInPortfolio" value=@lotsInPortfolio>
            </div>
            <div class="form-group col-md-2">
                <label for="lotsToTrade">Lots to trade</label>
                <input type="number" class="form-control" id="lotsToTrade" value=@lotsToTrade>
            </div>
            <div class="form-group col-md-2">
                <label for="price">Price</label>
                <input type="number" class="form-control" id="price" value=@price>
            </div>
            <div class="form-group col-md-3">
                <label for="sellButton"> Sell instrument </label>
                <input class="btn btn-primary" id="sellButton" value="Sell" @onclick="@Sell" />
            </div>
            <div class="form-group col-md-3">
                <label for="buyButton"> Buy instrument </label>
                <input class="btn btn-primary" id="buyButton" value="Buy" @onclick="@Buy" />
            </div>
        </div>
    }
    else
    {
        <h3 class="m-lg-5">@errorMessage</h3>
    }

</div>

@code {
    [Parameter]
    public string Figi { get; set; }

    private string tinkoffToken = "";
    private int lotsInPortfolio = 1;
    private int lotsToTrade = 1;
    private decimal price = 100;
    private bool errorOccured = false;
    private bool isInstrumentLoading = false;
    private Instrument instrument;
    private string errorMessage = "";


    private void Sell()
    {
        SendTradeRequest(OperationType.Sell);
    }

    private void Buy()
    {
        SendTradeRequest(OperationType.Buy);
    }

    private async Task<bool> SendTradeRequest(OperationType operation)
    {
        var request = new TradeRequest()
        {
            UserId = await Storage.GetItemAsync<Guid>("id"),
            Broker = BrokerType.TinkoffBroker,
            Token = tinkoffToken,
            Operation = operation,
            Figi = instrument.Figi,
            Lots = lotsToTrade,
            Price = price
        };

        return await BrokerManager.Trade(request);

    }


    private async Task SetToken()
    {
        var formModal = Modal.Show<SetTinkoffTokenModal>("Enter Tinkoff token");
        var modalResult = await formModal.Result;
        tinkoffToken = (string)modalResult.Data;

        Storage.SetItemAsync("tinkoffToken", tinkoffToken);
    }

    protected override async Task OnInitializedAsync()
    {
        errorOccured = false;
        isInstrumentLoading = true;
        instrument = new Instrument()
        {
            Figi = "default",
            Currency = "default",
            Name = "default",
            Lot = 0,
            Price = 0,
            Type = InstrumentType.Currency

        };

        try
        {
            tinkoffToken = await Storage.GetItemAsync<string>("tinkoffToken");

            if (tinkoffToken == null)
            {
                await SetToken();
            }

            instrument = await Storage.GetItemAsync<Instrument>("instrument");
            isInstrumentLoading = false;
        }
        catch (Exception)
        {
            isInstrumentLoading = false;

            errorMessage = "Can't load instruments, try again later";
            errorOccured = true;
        }
    }

}
