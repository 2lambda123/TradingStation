@page "/userinfo"
@using System.Security.Claims
@using ViewModels
@attribute [Authorize]

    <div class="col-12">
        <h3><b>User Info</b></h3>
        <hr />
        <div class="form-group">
            <label for="Name">Name:</label>
            <input type="text" class="input-group-text" disabled="@IsEditModeDisabled" value="@user.Name"/>
        </div>
        <div class="form-group">
            <label for="Surname">Surname: @user.Surname</label>
            <input type="text" class="input-group-text" disabled="@IsEditModeDisabled" value="@user.Surname"/>
        </div>
        <div class="form-group">
            <label for="Birthday">Birthday:</label>
            <input type="date" class="input-group-text" disabled="@IsEditModeDisabled" value="@user.DateOfBirth"/>
        </div>
        <div class="form-group">
            <label for="Email">Email:</label>
            <input class="input-group-text" disabled="disabled" value="@user.Email" />
        </div>
        <div class="form-group" style="@(IsPasswordBeingChanged ? "" : "height: 0; color: transparent")">
            <label for="OldPassword">Enter old password: </label>
            <input type="@(IsPasswordBeingChanged ? "password" : "hidden")" class="input-group-text" disabled="@(!IsPasswordBeingChanged)" value="@user.OldPassword" />
        </div>
        <div class="form-group" style="@(IsPasswordBeingChanged ? "" : "height: 0; color: transparent")">
            <label for="NewPassword">Enter new password: </label>
            <input type="@(IsPasswordBeingChanged ? "password" : "hidden")" class="input-group-text" disabled="@(!IsPasswordBeingChanged)" value="@user.NewPassword" />
        </div>
        <br />
        <input type="@(IsEditModeDisabled ? "hidden" : "button")" @onclick="@ChangePasswordClickHandler" class="form-control col-3 button btn-primary" value="@(IsPasswordBeingChanged ? "Cancel changing password" : "Change password")" />
        <br />
        <input type="button" @onclick="@EditInfoClickHandler" class="form-control col-3 button btn-primary" value="@(IsEditModeDisabled ? "Edit" : "Save changes")" />

    </div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private async Task EditInfoClickHandler()
    {
        if (IsEditModeDisabled)
        {
            IsEditModeDisabled = false;
        }
        else // Trying to save changes
        {
            IsEditModeDisabled = true;
            IsPasswordBeingChanged = false;
        }
    }

    private void ChangePasswordClickHandler()
    {
        IsPasswordBeingChanged ^= true;
    }

    public bool IsEditModeDisabled { get; set; }
    public bool IsPasswordBeingChanged { get; set; }
    public UserInfoViewModel user { get; set; }
    public EditContext editContext { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        var authUser = authState.User;
        IsEditModeDisabled = true;
        IsPasswordBeingChanged = false;
        user = new UserInfoViewModel();
        user.DateOfBirth = "7777-07-07";
        //
        //if (authUser.Identity.IsAuthenticated)
        //{
        //    var claims = authUser.Claims;
        //
        //    user = new User()
        //    {
        //        Name = claims?.FirstOrDefault(x => x.Type.Equals(ClaimTypes.GivenName, StringComparison.OrdinalIgnoreCase))?.Value,
        //        Surname = claims?.FirstOrDefault(x => x.Type.Equals(ClaimTypes.Surname, StringComparison.OrdinalIgnoreCase))?.Value,
        //        Email = claims?.FirstOrDefault(x => x.Type.Equals(ClaimTypes.Email, StringComparison.OrdinalIgnoreCase))?.Value,
        //        DateOfBirth = claims?.FirstOrDefault(x => x.Type.Equals(ClaimTypes.DateOfBirth, StringComparison.OrdinalIgnoreCase))?.Value
        //    };
        //}
        //else
        //{
        //    // TODO: logic
        //}
    }
}