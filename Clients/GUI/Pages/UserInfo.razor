@page "/userinfo"
@inject NavigationManager NavManager
@inject IModalService Modal
@attribute [Authorize]

<div class="col-12">
    <h3><b>User Info</b></h3>
    <hr />
    <div class="form-group">
        <label for="Name">Name:</label>
        <input type="text" class="input-group-text" disabled="@IsEditModeDisabled" value="@user.Name" />
    </div>
    <div class="form-group">
        <label for="Surname">Surname: @user.Surname</label>
        <input type="text" class="input-group-text" disabled="@IsEditModeDisabled" value="@user.Surname" />
    </div>
    <div class="form-group">
        <label for="Birthday">Birthday:</label>
        <input type="date" class="input-group-text" disabled="@IsEditModeDisabled" value="@user.DateOfBirth" />
    </div>
    <div class="form-group">
        <label for="Email">Email:</label>
        <input class="input-group-text" disabled="disabled" value="@user.Email" />
    </div>
    <div class="form-group" style="@(IsPasswordBeingChanged ? "" : "height: 0; color: transparent")">
        <label for="OldPassword">Enter old password: </label>
        <input type="@(IsPasswordBeingChanged ? "password" : "hidden")" class="input-group-text" disabled="@(!IsPasswordBeingChanged)" value="@user.OldPassword" />
    </div>
    <div class="form-group" style="@(IsPasswordBeingChanged ? "" : "height: 0; color: transparent")">
        <label for="NewPassword">Enter new password: </label>
        <input type="@(IsPasswordBeingChanged ? "password" : "hidden")" class="input-group-text" disabled="@(!IsPasswordBeingChanged)" value="@user.NewPassword" />
    </div>
    <br />
    <input type="@(IsEditModeDisabled ? "hidden" : "button")" @onclick="@ChangePasswordClickHandler" class="form-control col-3 button btn-primary" value="@(IsPasswordBeingChanged ? "Cancel changing password" : "Change password")" />
    <br />
    <input type="button" @onclick="@EditInfoClickHandler" class="form-control col-3 button btn-primary" value="@(IsEditModeDisabled ? "Edit" : "Save changes")" />
</div>

@code {
    public bool IsEditModeDisabled { get; set; }
    public bool IsPasswordBeingChanged { get; set; }
    public bool PopupVisible { get; set; }
    private UserInfoViewModel user;
    private Guid currentId;

    private void EditInfoClickHandler()
    {
        if (IsEditModeDisabled)
        {
            IsEditModeDisabled = false;
        }
        else // Trying to save changes
        {
            // Edit is inprocess in other team
            try
            {
                var dateOfBirth = DateTime.Parse(user.DateOfBirth);

                var userInfo = new DTO.UserInfo(user.Name, user.Surname, user.Email, dateOfBirth);

                // This is in process (endpoint is another team's task)
                if (IsPasswordBeingChanged)
                {
                    //UserEditor.EditUser(currentId, userInfo, user.OldPassword, user.NewPassword);
                }
                else
                {
                    //UserEditor.EditUser(currentId, userInfo, user.OldPassword, user.NewPassword);
                }
            }
            // This must be changed to a custom exception later
            catch (Exception)
            {

            }

            Modal.Show<Modals.ChangesSavedModal>("Changes saved");
            IsEditModeDisabled = true;
            IsPasswordBeingChanged = false;
        }
    }

    private void ChangePasswordClickHandler()
    {
        IsPasswordBeingChanged ^= true;
    }

    private void UpdateUserModel()
    {
        user = new UserInfoViewModel(); // TODO: get it by id
        user.Name = null; // to call pop-up
        user.Surname = "Smith";
        user.DateOfBirth = "7777-07-07";
        user.Email = "john.smith@gmail.com";
    }

    protected override void OnInitialized()
    {
        PopupVisible = false;
        IsEditModeDisabled = true;
        IsPasswordBeingChanged = false;
        currentId = new Guid(); // TODO: grab it from local storage
        UpdateUserModel();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (string.IsNullOrEmpty(user.Name))
        {
            var options = new ModalOptions() { HideCloseButton = true, DisableBackgroundCancel = true };

            var parameters = new ModalParameters();
            parameters.Add("id", currentId);

            Modal.Show<Modals.SetUserDataModal>("Set your personal data", parameters, options);
        }
    }
}