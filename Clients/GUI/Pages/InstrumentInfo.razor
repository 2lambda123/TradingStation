@page "/instrumentInfo"
@using System.Drawing
@using ChartJs.Blazor.ChartJS.Common
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Time
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.Util
@inject NavigationManager NavigationManager
@inject ISessionStorageService Storage
@inject IModalService Modal

<div class="container">
    <div class="row">
        <ChartJsLineChart @ref="lineChartJs" Config="@lineConfig" Width="400" Height="300" />
        <div class="col-md-6">
            <div style="width:100%" class="d-flex">
                <div class="flex-fill">
                    <label class="text-right">Current balance:  @currentBalance  @currency</label>
                </div>
                <div class="flex-fill">
                    <input type="button" class="btn-l col-md-3" value="Increase balance" @onclick="GoToBalancePage">
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <h3 align="center">@instrument.Name</h3>
        <br>
        <div class="container">
            @if (isInstrumentLoading)
            {
                <div class="spinner-border" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            }
            else if (!errorOccured)
            {
                <table class="table table-bordered">
                    <thead class="thead-light">
                        <tr>
                            <th scope="col">Figi</th>
                            <th scope="col">Name</th>
                            <th scope="col">Type</th>
                            <th scope="col">Currency</th>
                            <th scope="col">Count in lot</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>@instrument.Figi</td>
                            <td>@instrument.Name</td>
                            <td>@instrument.Type</td>
                            <td>@instrument.Currency</td>
                            <td>@instrument.CountInLot</td>
                        </tr>
                    </tbody>
                </table>

                <div class="form-row">
                    <div class="form-group col-md-3">
                        <label for="countInPortfolio">Count in portfolio</label>
                        <input type="number" disabled="disabled" class="form-control" id="countInPortfolio" @bind-value=@countInPortfolio>
                    </div>
                    <div class="form-group col-md-2">
                        <label for="lotsToTrade">Lots to trade</label>
                        <input type="number" class="form-control" id="lotsToTrade" @bind-value=@lotsToTrade>
                    </div>
                    <div class="form-group col-md-2">
                        <label for="price">Price</label>
                        <input type="number" disabled="disabled" class="form-control" id="price" @bind-value=@price>
                    </div>
                    <div class="form-group col-md-2">
                        <label for="sellButton"> Sell instrument </label>
                        <input class="btn btn-primary col-md-11" id="sellButton" value="Sell" @onclick="@Sell" />
                    </div>
                    <div class="form-group col-md-2">
                        <label for="buyButton"> Buy instrument </label>
                        <input class="btn btn-primary col-md-11" id="buyButton" value="Buy" @onclick="@Buy" />
                    </div>
                </div>
            }
            else
            {
                <h3 class="m-lg-5">@errorMessage</h3>
            }
        </div>
    </div>
</div>


@code {

    private ChartJsLineChart lineChartJs;
    private LineConfig lineConfig;
    private LineDataset<TimeTuple<decimal>> tempDataSet;
    private DateTime lastTime;

    private string tinkoffToken = "t.-lW-yXwRofmPWDrSqm9XpBO2K4WbTmHPkKPgRskRDlMqLCxzbP8efGmM3l6U1HU9ReMg5R0t3QqO86twfG3-vw";
    private int countInPortfolio = 1;
    private int lotsToTrade = 1;
    private decimal price = 0;
    private bool errorOccured = false;
    private bool isInstrumentLoading = false;
    private Instrument instrument;
    private string errorMessage = "";
    private Currency currency = Currency.Rub;
    private decimal currentBalance = 0;
    private UserBalance userBalance;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IEnumerable<Candle> list = null;

            try
            {
                list = await HubConnector.SubscribeOnCandle(OnReceivedMessage, BrokerType.TinkoffBroker, instrument.Figi, 15, tinkoffToken);

                if (list.Any())
                {
                    price = list.Last().Close;

                    AddCandles(list);

                    await UpdateNameInstrument();
                }
                else
                {
                    ChangeTitle("Exchange doesn't work");
                }
            }
            catch (InternalServerException e)
            {
                ChangeTitle("Figi not found");
            }
        }
    }

    private async Task UpdateNameInstrument()
    {
        ChangeTitle(instrument.Name);
    }

    private async void ChangeTitle(string title)
    {
        lineConfig.Options.Title.Text = new IndexableOption<string>(title);
        await lineChartJs.Update();
    }

    private void OnReceivedMessage(Candle candle)
    {
        if (lastTime == null || lastTime != candle.Time)
        {
            price = candle.Close;
            StateHasChanged();

            lastTime = candle.Time;

            tempDataSet.Add(new TimeTuple<decimal>(new Moment(candle.Time), candle.Close));
            if (tempDataSet.Data.Count > 15)
            {
                tempDataSet.RemoveAt(0);
            }
            lineConfig.Data.Datasets.Add(tempDataSet);

            lineChartJs.Update();
        }
    }

    private void AddCandles(IEnumerable<Candle> candles)
    {
        tempDataSet.AddRange(candles.ToList().ConvertAll(candle =>
            new TimeTuple<decimal>(new Moment(candle.Time), candle.Close)));

        lineConfig.Data.Datasets.Add(tempDataSet);

        lastTime = candles.Last().Time;
    }

    private void OnError()
    {
        lineConfig.Options.Title.Text = "Instrument not found";

        lineChartJs.Update();
    }

    protected override void OnInitialized()
    {
        SetChartConfig();
    }

    private void SetChartConfig()
    {
        lineConfig = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = ""
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = false
                },
                Scales = new Scales
                {
                    xAxes = new List<CartesianAxis>
        {
            new TimeAxis
            {
                Distribution = TimeDistribution.Linear,
                Ticks = new TimeTicks
                {
                    Source = TickSource.Data
                },
                Time = new TimeOptions
                {
                    Unit = TimeMeasurement.Minute,
                    Round = TimeMeasurement.Minute,
                    TooltipFormat = "DD.MM.YYYY HH:mm",
                    DisplayFormats = TimeDisplayFormats.DE_CH
                }
            }
        }
                },
                Hover = new LineOptionsHover
                {
                    Intersect = true,
                    Mode = InteractionMode.Y
                },
                Legend =
    {
        Display = false
    }
            }
        };

        tempDataSet = new LineDataset<TimeTuple<decimal>>
        {
            BorderColor = ColorUtil.FromDrawingColor(Color.CornflowerBlue),
            Fill = false,
            BorderWidth = 2,
            PointRadius = 3,
            PointBorderWidth = 1,
            SteppedLine = SteppedLine.False
        };
    }

    private void UpdateBalanceVariable()
    {
        currentBalance = currency switch
        {
            Currency.Rub => userBalance.BalanceInRub,
            Currency.Usd => userBalance.BalanceInUsd,
            Currency.Eur => userBalance.BalanceInEur
        };
    }

    private async Task GetCountFromPortfolio()
    {
        var instrumentInfo = await BrokerManager.GetInstrumentFromPortfolio(userBalance.UserId, instrument.Figi);
        countInPortfolio = instrumentInfo.TotalCount;
    }

    private async Task GetUserBalance()
    {
        userBalance = await BrokerManager.GetUserBalance(userBalance.UserId);
        UpdateBalanceVariable();
    }

    private async Task Sell()
    {
        UpdateBalanceVariable();
        if (countInPortfolio < lotsToTrade * instrument.CountInLot)
            Modal.Show<EmptyModal>("Count in portfolio less than you can sell");
        else
        {
            try
            {
                var result = await SendTradeRequest(OperationType.Sell);
                if (result == false)
                {
                    errorOccured = true;
                    errorMessage = "Unable to sell instrument. Try again later.";
                }
                else
                {
                    await GetCountFromPortfolio();
                    await GetUserBalance();
                }
            }
            catch (Exception e)
            {
                errorOccured = true;
                errorMessage = e.Message;
            }
        }
    }

    private async Task Buy()
    {
        UpdateBalanceVariable();
        if (currentBalance < lotsToTrade * instrument.CountInLot * price)
            Modal.Show<EmptyModal>("You need more money to make a deal");
        else
        {
            try
            {
                var result = await SendTradeRequest(OperationType.Buy);
                if (result == false)
                {
                    errorOccured = true;
                    errorMessage = "Unable to buy instrument. Try again later.";
                }
                else
                {
                    await GetCountFromPortfolio();
                    await GetUserBalance();
                }
            }
            catch (Exception e)
            {
                errorOccured = true;
                errorMessage = e.Message;
            }
        }
    }

    private async Task<bool> SendTradeRequest(OperationType operation)
    {
        var request = new TradeRequest()
        {
            UserId = userBalance.UserId,
            Broker = BrokerType.TinkoffBroker,
            Token = tinkoffToken,
            Operation = operation,
            Figi = instrument.Figi,
            Count = lotsToTrade * instrument.CountInLot,
            Price = price,
            Currency = currency
        };
        bool result = false;
        try
        {
            result = await BrokerManager.Trade(request);
        }
        catch
        {
            errorOccured = true;
            errorMessage = "Unable to make a deal. Try again later.";
        }
        return result;
    }

    private void GoToBalancePage()
    {
        NavigationManager.NavigateTo("/balance");
    }

    protected override async Task OnInitializedAsync()
    {
        errorOccured = false;
        isInstrumentLoading = true;
        instrument = new Instrument();

        try
        {
            instrument = await Storage.GetItemAsync<Instrument>("instrument");
            currency = instrument.Currency;
            userBalance = new UserBalance() { UserId = await Storage.GetItemAsync<Guid>("id") };
            await GetUserBalance();
            await GetCountFromPortfolio();
            isInstrumentLoading = false;

        }
        catch (Exception)
        {
            isInstrumentLoading = false;

            errorMessage = "Can't load instruments, try again later";
            errorOccured = true;
        }
    }
}

