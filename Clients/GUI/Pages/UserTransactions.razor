@page "/transactions"
@inject ISessionStorageService Storage
@inject IJSRuntime JSRuntime;

<div class="container text-center">
    <h3>Transactions</h3>
    @if (errorMessage.Length != 0)
    {
        <h4>@errorMessage</h4>
    }
    else
    {
        <table id="transactions" class="table table-bordered table-striped">
            <thead class="thead-dark">
                <tr>
                    <th scope="col">Broker</th>
                    <th scope="col">Count</th>
                    <th scope="col">Currency</th>
                    <th scope="col">Date Time</th>
                    <th scope="col">Successful</th>
                    <th scope="col">Operation</th>
                    <th scope="col">Price</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var transaction in lisTransactions)
                {
                    <tr class="align-items-center">
                        <td>@BrokerTostring(transaction.Broker)</td>
                        <td>@transaction.Count</td>
                        <td>@transaction.Currency</td>
                        <td>@transaction.DateTime</td>
                        <td>@(transaction.IsSuccess ? "Yes" : "No")</td>
                        <td>@transaction.Operation</td>
                        <td>@transaction.Price</td>
                    </tr>
                }

            </tbody>
        </table>
    }

</div>

@code {
    private string errorMessage = "";
    IEnumerable<Transaction> lisTransactions = new List<Transaction>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            lisTransactions = await BrokerManager.GetTransactions(await Storage.GetItemAsync<Guid>("id"));
        }
        catch (BaseException e)
        {
            errorMessage = e.Message;
        }
        catch (Exception e)
        {
            errorMessage = "The server cannot process your request.";
        }
    }

    private string BrokerTostring(BrokerType transactionBroker)
    {
        return transactionBroker switch
        {
            BrokerType.TinkoffBroker => "Tinkoff Broker",
            _ => "Unknown broker"
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            await JSRuntime.InvokeVoidAsync("AddTableSort");
        }
    }
}
