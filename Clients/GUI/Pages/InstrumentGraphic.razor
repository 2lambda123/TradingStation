@page "/instrument/{Figi}"
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Handlers
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Time
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.Charts
@using GUI.Scripts
@inject NavigationManager NavigationManager
@inject ISessionStorageService Storage
@inject IJSRuntime JsRuntime

<ChartJsLineChart @ref="lineChartJs" Config="@lineConfig" Width="600" Height="300"/>

@code {

    [Parameter]
    public string Figi { get; set; }

    private string Name = "";
    private string token = "";
    private ChartJsLineChart lineChartJs;
    private LineConfig lineConfig;
    private LineDataset<TimeTuple<decimal>> tempDataSet;
    private DateTime lasTime;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            token = await Storage.GetItemAsync<string>("tinkoffToken");

            if (token == null)
            {
                lineConfig.Options.Title.Text = "Access error";

                return;
            }

            await HubConnector.SubscribeOnCandle(OnReceivedMessage, OnError, token, Figi);

            await UpdateName();
        }
    }

    private async Task UpdateName()
    {
        Name = await Storage.GetItemAsync<string>("tinkoffInstrumentName");

        lineConfig.Options.Title.Text = Name;
    }

    private void OnReceivedMessage(Candle Candle)
    {
        if (lasTime == null || lasTime != Candle.Time)
        {
            lasTime = Candle.Time;

            tempDataSet.Add(new TimeTuple<decimal>(new Moment(Candle.Time), Candle.Close));
            lineConfig.Data.Datasets.Add(tempDataSet);
            
            lineChartJs.Update();
        }
    }

    private void OnError()
    {
        lineConfig.Options.Title.Text = "Instrument not found";

        lineChartJs.Update();
    }

    protected override void OnInitialized()
    {
        SetChartConfig();
    }

    private void SetChartConfig()
    {
        lineConfig = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = Name
                },
                Legend = new Legend
                {
                    Position = Position.Right,
                    Labels = new LegendLabelConfiguration
                    {
                        UsePointStyle = true
                    }
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = false
                },
                Scales = new Scales
                {
                    xAxes = new List<CartesianAxis>
                    {
                        new TimeAxis
                        {
                            Distribution = TimeDistribution.Linear,
                            Ticks = new TimeTicks
                            {
                                Source = TickSource.Data
                            },
                            Time = new TimeOptions
                            {
                                Unit = TimeMeasurement.Minute,
                                Round = TimeMeasurement.Minute,
                                TooltipFormat = "DD.MM.YYYY HH:mm",
                                DisplayFormats = TimeDisplayFormats.DE_CH
                            }
                        }
                    }
                },
                Hover = new LineOptionsHover
                {
                    Intersect = true,
                    Mode = InteractionMode.Y
                }
            }
        };

        tempDataSet = new LineDataset<TimeTuple<decimal>>
        {
            Fill = false,
            BorderWidth = 2,
            PointRadius = 3,
            PointBorderWidth = 1,
            SteppedLine = SteppedLine.False
        };
    }
}