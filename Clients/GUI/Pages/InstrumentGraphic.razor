@page "/instrument/{Figi}"
@using System.Timers
@using DTO.BrokerRequests
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject ISessionStorageService Storage
@inject IJSRuntime JSRuntime

    <div class="container ml-0 align-items-center w-75" id="myChart">@errorMessage</div>

@code {

    [Parameter]
    public string Figi { get; set; }

    public HubConnection hubConnection;
    private string errorMessage = "";
    private Timer timer;
    private string token = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            token = await Storage.GetItemAsync<string>("tinkoffToken");
            if (token == null)
            {
                errorMessage = "Access error";
                StateHasChanged();
                return;
            }

            hubConnection = new HubConnectionBuilder()
                .WithUrl("https://localhost:5009/CandleHub")
                .Build();

            hubConnection.On<Candle>("ReceiveMessage", Candle =>
            {
                timer.Stop();
                timer.Dispose();
                JSRuntime.InvokeVoidAsync("updateChart", Candle);
            });

            await hubConnection.StartAsync();

            await hubConnection.SendAsync("Subscribe", new SubscribeOnCandleRequest
            {
                Token = token,
                Broker = BrokerType.TinkoffBroker,
                Figi = Figi
            });

            await JSRuntime.InvokeVoidAsync("drawChart", "myChart", Figi);

            timer = new Timer(8000);
            timer.Elapsed += OnTimedEvent;
            timer.AutoReset = false;
            timer.Start();
        }
    }

    private void OnTimedEvent(object source, ElapsedEventArgs e)
    {
        errorMessage = "FIGI doesn't exist";
        JSRuntime.InvokeVoidAsync("updateOptions", errorMessage);
        hubConnection.StopAsync();
        timer.Stop();
        timer.Dispose();
    }

}