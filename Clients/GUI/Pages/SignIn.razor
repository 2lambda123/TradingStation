@page "/signin"
@using GUIModels
@using Auth
@inject AuthStateProvider AuthenticationProvider
@inject NavigationManager NavigationManager

<div class="col-12">
    <h3><b>Sign In</b></h3>
    <hr />

    <EditForm EditContext="@_editContext" OnValidSubmit="@TrySignIn">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="Email">Email</label>
            <InputText class="form-control col-3" @bind-Value="userInput.Email" placeholder="example@gmail.com" />
            <ValidationMessage For="() => userInput.Email" />
        </div>
        <br />
        <div class="form-group">
            <label for="Password">Password</label>
            <InputText class="form-control col-3" @bind-Value="userInput.Password" placeholder="*****" />
            <ValidationMessage For="() => userInput.Password" />
        </div>

        <input type="submit" class="form-control col-1 button btn-primary" value="Sign in" />

    </EditForm>
</div>


@code {
    [CascadingParameter]
    private Task<AuthenticationState> authState { get; set; }

    private SignInData userInput;
    private EditContext _editContext;

    private void TrySignIn()
    {
        // var checkedUser = await UserService.Check(user)
        // if != null
        if (userInput.Email == "root" && userInput.Password == "root")
        {
            AuthenticationProvider.MarkSignedIn();
            NavigationManager.NavigateTo("userinfo");
        }
        else
        {
            // handle incorrect input
            // TODO: add custom validator? 
        }
    }

    protected async override Task OnInitializedAsync()
    {
        userInput = new SignInData();
        _editContext = new EditContext(userInput);

        var claims = (await authState).User;

        if (claims.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/userinfo");
        }
    }
}