@page "/signin"
@using ViewModels
@using Authentication
@inject AuthStateProvider AuthenticationProvider
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<div class="col-12">
    <h3><b>Sign In</b></h3>
    <hr />

    <EditForm EditContext="@editContext" OnSubmit="@TrySignIn">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="Email">Email</label>
            <InputText class="form-control col-3" @bind-Value="userInput.Email" placeholder="example@gmail.com" />
            <ValidationMessage For="() => userInput.Email" />
        </div>
        <br />
        <div class="form-group">
            <label for="Password">Password</label>
            <InputText class="form-control col-3" @bind-Value="userInput.Password" placeholder="*****" />
            <ValidationMessage For="() => userInput.Password" />
        </div>

        <input type="submit" class="form-control col-1 button btn-primary" value="Sign in" />

    </EditForm>
</div>


@code {
    [CascadingParameter]
    private Task<AuthenticationState> authState { get; set; }

    /// <summary>
    /// Objects for interactiong with form
    /// </summary>
    private SignInViewModel userInput;
    private EditContext editContext;
    private ValidationMessageStore messageStore;

    /// <summary>
    /// Sign in button press event handler
    /// </summary>
    private async Task TrySignIn()
    {
        // TODO: implement ValidateInput()
        var isValid = await ValidateInput(editContext);
        // Not sure if all this validating stuff is done properly
        messageStore.Clear();
        editContext.NotifyValidationStateChanged();

        if (userInput.Email == "root@gmail.com" && userInput.Password == "root")
        {
            await LocalStorage.SetItemAsync("root", "token");
            AuthenticationProvider.MarkSignedIn();
            NavigationManager.NavigateTo("userinfo");
        }
        else
        {
            messageStore.Add(editContext.Field("Email"), "Invalid login data");
            messageStore.Add(editContext.Field("Password"), "Invalid login data");
            editContext.NotifyValidationStateChanged();
        }
    }

    //TODO: Validate input using api and move it to validations folder
    private async Task<bool> ValidateInput(EditContext context)
    {
        var serverCheck = userInput.Email == "root@gmail.com" && userInput.Password == "root";
        return serverCheck;
    }

    protected async override Task OnInitializedAsync()
    {
        userInput = new SignInViewModel();
        editContext = new EditContext(userInput);
        messageStore = new ValidationMessageStore(editContext);

        var claims = (await authState).User;

        if (claims.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/userinfo");
        }
    }
}