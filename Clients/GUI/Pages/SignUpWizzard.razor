@page "/signupwiz"
@using System.IO
@using GUI.Components
@using GUI.Scripts
@using GUI.ViewModels
@inject NavigationManager NavigationManager
<EditForm Model="@userInput" OnValidSubmit="@TrySignUp">
        <Wizard Id="Wizard">
            <WizardStep Name="First Step">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label for="Name">Name:</label>
                    <InputText class="form-control col-3" @bind-Value="userInput.FirstName" placeholder="Your name" />
                </div>
                <div class="form-group">
                    <label for="Surname">Surname:</label>
                    <InputText class="form-control col-3" @bind-Value="userInput.LastName" placeholder="Your surname" />
                </div>
                <div class="form-group">
                    <label for="Birthday">Birthday:</label>
                    <InputDate class="form-control col-3" @bind-Value="userInput.Birthday" />
                </div>
                <div class="form-group">
                    <label for="Email">Email</label>
                    <InputText class="form-control col-3" @bind-Value="userInput.Email" placeholder="example@gmail.com" />
                </div>
                <div class="form-group">
                    <label for="Password">Password</label>
                    <InputText class="form-control col-3" type="password" @bind-Value="userInput.Password" placeholder="*****" />
                </div>

                <div class="form-group">
                    <label for="ConfirmPassword">Confirm Password</label>
                    <InputText class="form-control col-3" type="password" @bind-Value="userInput.ConfirmPassword" placeholder="*****" />
                </div>
                <br />

                <ValidationSummary />
                @if (isErrorDisplayed)
                {
                    <label style=" color: red;"> @errorMessage </label>
                    <br />
                }

            </WizardStep>
            <WizardStep Name="Second Step">
                <div class="row">
                    <div class="container m-5">
                        <label>Send your avatar</label>
                        <br />
                        <InputFile OnChange="HandleSelection" />
                        <br />
                        @if (isErrorDisplayed)
                        {
                            <label style="color: red;"> @errorMessage </label>
                            <br />
                        }
                        <ValidationSummary />
                    </div>
                </div>
            </WizardStep>
        </Wizard>
    </EditForm>

@code {
    bool isErrorDisplayed = false;
    string errorMessage = "";
    private SignUpViewModel userInput;

    public async Task TrySignUp()
    {
        try
        {
            var request = new CreateUserRequest
            {
                FirstName = userInput.FirstName,
                LastName = userInput.LastName,
                Birthday = userInput.Birthday,
                Email = userInput.Email,
                Password = userInput.Password,
                AvatarType = userInput.TypeAvatar,
                Avatar = userInput.Avatar
            };

            await SignUpper.SignUp(request);
            NavigationManager.NavigateTo("/signin");
        }
        catch (BadRequestException)
        {
            userInput = new SignUpViewModel();
            isErrorDisplayed = true;
            errorMessage = "Something went wrong during registration";
        }
        catch (NotFoundException)
        {
            userInput = new SignUpViewModel();
            isErrorDisplayed = true;
            errorMessage = "Something went wrong during signing you in";
        }
        catch (Exception e)
        {
            userInput = new SignUpViewModel();
            isErrorDisplayed = true;
            errorMessage = e.Message;
        }
    }

    protected override void OnInitialized()
    {
        userInput = new SignUpViewModel();
    }

    async Task HandleSelection(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file != null)
        {
            var ms = new MemoryStream();
            await file.Data.CopyToAsync(ms);
            userInput.TypeAvatar = Path.GetExtension(file.Name).TrimStart('.');
            userInput.Avatar = ms.ToArray();
        }
    }

}

